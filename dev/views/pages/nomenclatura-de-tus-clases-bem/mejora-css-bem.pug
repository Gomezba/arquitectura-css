extends ../../templates/template 

append h1 
    h1 Mejorar CSS con BEM ventajas e inconvenientes


append content 
    article(id="1" class="content")
        h2 ¿Qué es BEM?
        p BEM (Block, Element, Modifier) es un sistema de nomenclatura de clases que aborda los principales desafíos al nombrar clases en CSS: minimiza el riesgo de colisión de nombres, reduce la necesidad de anidar selectores, y deja claro, tanto en el HTML como en el CSS, la relación jerárquica entre clases.

        p Enlaces BEM 
            ul 
                li 
                    a(href="https://www.smashingmagazine.com/2018/06/bem-for-beginners/" target="_blank").link Bem para principiantes 
                li 
                    a(href="https://bem-cheat-sheet.9elements.com" target="_blank").link Bem documentación 
                li 
                    a(href="https://www.smashingmagazine.com/2016/06/battling-bem-extended-edition-common-problems-and-how-to-avoid-them/" target="_blank").link 10 problemas comunes y como evitarlos
                li 
                    a(href="https://github.com/chris-pearce/css-guidelines#state-hooks" target="_blank").link css-guidelines

    article(id="2" class="content")
        h2 Ejemplo básico 
        div: pre: code.language-html 
            |&lt;article class="card"&gt;
            |&lt;img class="card__img" src="/arquitectura-css.png" alt="Imagen del curso de arquitectura CSS" /&gt;
            |&lt;h3 class="card__title"&gt;Arquitectura CSS&lt;/h3&gt;
            |&lt;strong class="card__meta"&gt;gomezba&lt;/strong&gt;
            |&lt;p&gt;Aprende a crear layouts escalables y mantenibles en CSS...&lt;/p&gt;
            |&lt;button class="button button--primary"&gt;Empezar curso&lt;/button&gt;
            |&lt;/article&gt;
        br      
        div: pre: code.language-scss 
            |.card {
            |  &__img { /* Estilos para la imagen dentro de la card */ }
            |  &__title { /* Estilos para el título de la card */ }
            |  &__meta { /* Estilos para la meta información de la card */ }
            |}
            |.button {
            |  &--primary { /* Estilos para el botón principal */ }
            |}

        div: p En este ejemplo, podemos observar cómo la clase card actúa como el bloque principal. Los elementos card__img, card__title, y card__meta están claramente relacionados con el bloque card (denotado por el doble guion bajo __), mientras que button--primary es un modificador de la clase button que en realidad es un bloque, indicando una variación específica de estilo.    

    article(id="3" class="content")
        h2 Evitando Errores Comunes
        p Uno de los errores más frecuentes al usar BEM es replicar la estructura del HTML dentro del CSS, lo que lleva a clases excesivamente largas y CSS estrechamente acoplado a la estructura del HTML:
        div: pre: code.language-html 
            |&lt;article class="card"&gt;
            |  &lt;img class="card__img" src="/cursos/arquitectura-css.png" alt="Imagen del curso de arquitectura CSS" /&gt;
            |  &lt;div class="card__info"&gt;
            |    &lt;h3 class="card__info__title"&gt;Arquitectura CSS&lt;/h3&gt;
            |    &lt;strong class="card__info__meta"&gt;gomezba&lt;/strong&gt;
            |  &lt;/div&gt;
            |  &lt;button class="button button--primary"&gt;Empezar curso&lt;/button&gt;
            |&lt;/article&gt;
        br
        div: pre: code.language-scss 
            |.card {
            |  &__info { }
            |  &__info__title { } /* Error: exceso de anidación */
            |  &__info__meta { } /* Error: exceso de anidación */
            |}

        div: p Este tipo de anidación no solo genera clases innecesariamente largas (card__info__title), sino que también acopla demasiado el CSS a la estructura del HTML, haciendo que sea menos flexible. En BEM, todos los elementos (element) deberían ser descendientes directos del bloque:

        div.has-mb: pre: code.language-scss 
            |.card {
            |  &__info { /* Estilos para la sección de información */ }
            |  &__title { /* Estilos para el título */ }
            |  &__meta { /* Estilos para la meta información */ }
            |}

    article(id="4" class="content")
        h2 Uso Correcto de Modificadores
        p Otro error común es crear modificadores para elementos individuales cuando sería más lógico usar un modificador a nivel de bloque:

        div: pre: code.language-html 
            |&lt;article class="card card--dark"&gt;
            |  &lt;img class="card__img" src="/cursos/arquitectura-css.png" alt="Imagen del curso de arquitectura CSS" /&gt;
            |  &lt;h3 class="card__title card__title--dark"&gt;Arquitectura CSS&lt;/h3&gt;
            |  &lt;strong class="card__meta card__meta--dark"&gt;gomezba&lt;/strong&gt;
            |&lt;/article&gt;
        br 
        div: pre: code.language-scss 
            |.card {
            |  &--dark { /* Modifica todo el bloque para un tema oscuro */ }
            |  &__title {
            |    &--dark { } /* Error: redundante y poco escalable */
            |  }
            |  &__meta {
            |    &--dark { } /* Error: redundante y poco escalable */
            |  }
            |}

        div: p En este caso, estamos dispersando la responsabilidad de adaptar la tarjeta a un tema oscuro entre varios modificadores (card__title--dark, card__meta--dark), lo cual es innecesario y fragmenta el CSS. En su lugar, podemos agrupar la responsabilidad dentro del modificador del bloque:

        div: pre: code.language-scss 
            |.card {
            |  &__img { /* Estilos para la imagen */ }
            |  &__title { /* Estilos para el título */ }
            |  &__meta { /* Estilos para la meta información */ }
            |
            |  &--dark {
            |    /* Modificaciones de estilo para la versión oscura de la card */
            |    .card__title { }
            |    .card__meta { }
            |  }
            |}

        div: p Conclusión
        p El uso correcto de BEM no solo ayuda a mantener el código CSS organizado y fácil de entender, sino que también mejora la mantenibilidad a largo plazo. Evitar la sobreanidación y usar modificadores a nivel de bloque cuando corresponda son claves para aprovechar al máximo este sistema.    


append submenu 
    -submenuLinks = [[1,'¿Qué es BEM?'],[2,'Ejemplo básico'],[3,'Evitando Errores Comunes'],[4,'Uso Correcto de Modificadores']]
    +submenu(submenuLinks)